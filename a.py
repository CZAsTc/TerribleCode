import struct
def _0(_1):
    _2 = ((1 << 0) + (1 << 4) + (1 << 2) + (1 << 0) >> 1) >> ((1 << 3) + (1 << 1) + (1 << 0))
    for _3 in _1:
        yield _2, _3
        _2 += ((2 << 3) - (3 << 2) + (4 << 1) - (5 << 1) - (1 << 2) + ((1 << 0) << 2)) >> 1
def _4(_5):
    _6 = [None] * (1 << 8)
    for _7, _8 in _0(b"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!#$%&()*+-;<=>?@^_`{|}~"):
        _6[_8] = _7
    _9 = (-len(_5)) % (3 ^ 6)
    _5 = _5 + b'~' * _9
    _10 = []
    _11 = struct.Struct('!I').pack
    for _7 in range((((1 << 4 - 1) << (1 << 2)) ^ (7 << 1) ^ 5) >> 8, len(_5), 3 ^ 6):
        _12 = _5[_7:_7 + 5]
        _13 = (((1 << 4 - 1) << (1 << 2)) ^ (7 << 1) ^ 5) >> 8
        for _8 in _12:
            _13 = _13 * ((1 << 6) + (1 << 4) + (1 << 2) + (1 << 0)) + _6[_8]
        _10.append(_11(_13))
    _14 = b''.join(_10)
    if _9:
        _14 = _14[:-_9]
    return _14.decode()
_15 = lambda _16: _4(_16)
_17 = [b'Wp-g~', b'VtI6BVRCX|c>', b'VE', b'WMyM-WMu']
_18 = map(_15, _17)
_19 = ""
_20 = 0
while True:
    if _20 == ((2 << 1) + (7 & 1)):
        _19 += next(_18)
        _19 += "())"
        break
    if _20 == ((2 << 1) - (1 << 0)):
        _19 += next(_18)
        _19 += ")."
        _20 += (2 << 0)
    if _20 == (2 << 1):
        _19 += next(_18)
        _19 += "("
        _20 -= (1 << 0)
    if _20 == (-((-1) << 0) - (1 << 0)):
        _19 += next(_18)
        _19 += "("
        _20 += (2 << 1)
a = [112, 114, 105, 110, 116, 40, 34, 72, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100, 33, 34, 41]
eval(_19)
